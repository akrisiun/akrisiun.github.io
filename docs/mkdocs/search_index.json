{
    "docs": [
        {
            "location": "/",
            "text": "github.io\n, \nhttp://github.com/akrisiun/osx-wiki\n,\n\n\nhttp://github.com/akrisiun/dotnet-wiki\n,\n\n\nhttp://github.com/akrisiun/profile.win10\n\n\n\n\n\n\n\n\nmacOS, Linux\n\n\nWindows, .NET\n\n\nDocker\n\n\n\n\n\n\n\n\n\n\nREADME\n\n\nre-Install\n with choco\n\n\nswarm\n\n\n\n\n\n\nmysql\n\n\npowershell\n\n\nmkdocs\n\n\n\n\n\n\nmono\n\n\n\n\n\n\n\n\n\n\nbrew",
            "title": "index"
        },
        {
            "location": "/README/",
            "text": "osx-wiki\n\n\nset path\n\n\nhttp://www.cyberciti.biz/faq/appleosx-bash-unix-change-set-path-environment-variable/\n\n\n.bash\necho $PATH\nls -l /etc/paths.d/\n\nset\nnano  \n ctrl+E , ctrl+O\n\n\n\n\nHello world .sh\n\n\nSave the following into a file called hello.sh:\n\n\n#!/bin/bash\necho \nHello, World!\n \necho \nKnowledge is power.\n\n\n\n\n\n\n\n```chmod +x hello.sh\n./hello.sh\n\n\n\n\n\n###View All System Variables\n\n\nhttp://bash.cyberciti.biz/guide/Main_Page\n\n\nhttp://bash.cyberciti.biz/guide/Variables#Commonly_Used_Shell_Variables\n\n\nTo see all system variables, type the following command at a console / terminal:\n\nset\nOR\nenv\n\n\n\n\n\nps aux | grep root\n\n\n\n### mono ASP.NET\n\n```sudo xsp4 --port 80 --root ~/public_html\n\n\n\n\nMVC mono\n\n\n???\n\n\nsetup gcloud\n\n\nsudo nano /etc/paths.d/gcloud\n~/google-cloud-sdk/bin/gcloud\n\n\ncurl https://sdk.cloud.google.com | bash\n~/google-cloud-sdk/bin/gcloud",
            "title": "osx-wiki"
        },
        {
            "location": "/README/#osx-wiki",
            "text": "",
            "title": "osx-wiki"
        },
        {
            "location": "/README/#set_path",
            "text": "http://www.cyberciti.biz/faq/appleosx-bash-unix-change-set-path-environment-variable/  .bash\necho $PATH\nls -l /etc/paths.d/\n\nset\nnano  \n ctrl+E , ctrl+O",
            "title": "set path"
        },
        {
            "location": "/README/#hello_world_sh",
            "text": "Save the following into a file called hello.sh:  #!/bin/bash\necho  Hello, World!  \necho  Knowledge is power.    ```chmod +x hello.sh\n./hello.sh   \n###View All System Variables http://bash.cyberciti.biz/guide/Main_Page  http://bash.cyberciti.biz/guide/Variables#Commonly_Used_Shell_Variables \n\nTo see all system variables, type the following command at a console / terminal:\n\nset\nOR\nenv  ps aux | grep root  \n### mono ASP.NET\n\n```sudo xsp4 --port 80 --root ~/public_html",
            "title": "Hello world .sh"
        },
        {
            "location": "/README/#mvc_mono",
            "text": "???",
            "title": "MVC mono"
        },
        {
            "location": "/README/#setup_gcloud",
            "text": "sudo nano /etc/paths.d/gcloud\n~/google-cloud-sdk/bin/gcloud  curl https://sdk.cloud.google.com | bash\n~/google-cloud-sdk/bin/gcloud",
            "title": "setup gcloud"
        },
        {
            "location": "/mysql/",
            "text": "mysql for osx\n\n\nbrew install mysql --enable-debug\n\n\nhttps://rtcamp.com/tutorials/mac/osx-brew-php-mysql-nginx/\n\n\nconfigure\n\n\nRun following command to improve security of your mysql setup. It will present you wizard to set mysql root password among other things.\nmysql_secure_installation\nFor workbench\n\n\nFollowing changes will make it easy to use MySQL WorkBench\n\n\nsudo ln -s /usr/local/Cellar/mysql/5.6.22 /usr/local/mysql\nsudo ln -s /usr/local/Cellar/mysql/5.6.22/my.cnf /etc/my.cnf\n\n\nTest connection\nmysql -uroot -p\n\n\nhomebrew\n\n\nhttp://blog.frd.mn/install-nginx-php-fpm-mysql-and-phpmyadmin-on-os-x-mavericks-using-homebrew/\n\n\nSetup SSL\nCreate folder for our SSL certificates and private keys:\n\n\nmkdir -p /usr/local/etc/nginx/ssl\nGenerate 4096bit RSA keys and the self-sign the certificates in one command:\nopenssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj \n/C=US/ST=State/L=Town/",
            "title": "mysql"
        },
        {
            "location": "/mysql/#mysql_for_osx",
            "text": "brew install mysql --enable-debug  https://rtcamp.com/tutorials/mac/osx-brew-php-mysql-nginx/",
            "title": "mysql for osx"
        },
        {
            "location": "/mysql/#configure",
            "text": "Run following command to improve security of your mysql setup. It will present you wizard to set mysql root password among other things.\nmysql_secure_installation\nFor workbench  Following changes will make it easy to use MySQL WorkBench  sudo ln -s /usr/local/Cellar/mysql/5.6.22 /usr/local/mysql\nsudo ln -s /usr/local/Cellar/mysql/5.6.22/my.cnf /etc/my.cnf  Test connection\nmysql -uroot -p",
            "title": "configure"
        },
        {
            "location": "/mysql/#homebrew",
            "text": "http://blog.frd.mn/install-nginx-php-fpm-mysql-and-phpmyadmin-on-os-x-mavericks-using-homebrew/  Setup SSL\nCreate folder for our SSL certificates and private keys:  mkdir -p /usr/local/etc/nginx/ssl\nGenerate 4096bit RSA keys and the self-sign the certificates in one command:\nopenssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj  /C=US/ST=State/L=Town/",
            "title": "homebrew"
        },
        {
            "location": "/mono/",
            "text": "MONO on osx\n\n\n/usr/bin/mono\n\n\nhttp://mono.1490590.n4.nabble.com/System-DllNotFoundException-libc-dylib-td3327299.html#a3385966\n\n\n$PATH\n/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/git/bin",
            "title": "mono"
        },
        {
            "location": "/mono/#mono_on_osx",
            "text": "/usr/bin/mono  http://mono.1490590.n4.nabble.com/System-DllNotFoundException-libc-dylib-td3327299.html#a3385966  $PATH\n/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/git/bin",
            "title": "MONO on osx"
        },
        {
            "location": "/docker/swarm/",
            "text": "create Swarm\n\n\nhttps://nathanleclaire.com/blog/2015/06/02/docker-machine-0.3.0-sneak-preview-transmogrify-existing-servers-to-be-docker-ready-and-much-much-more/\n\n\ndocker-machine create \\\n    -d generic \\\n    --swarm \\\n    --swarm-master \\\n    --swarm-discovery token://181a89a5589fbc7f3be78e09b585d21a \\\n    --generic-ip-address 107.170.195.209 \\\n    gendo\n\ndocker-machine create -d generic  --swarm --swarm-master \\\n    --swarm-discovery token://b8db8e2b18886a43e77b66c8054a6b31 \\\n    --generic-ip-address 192.168.1.19  --generic-ssh-user \ndocker\n ferma1\n\n\neval $(docker-machine env ferma1)\neval $(docker-machine env --swarm ferma1)",
            "title": "swarm"
        },
        {
            "location": "/docker/swarm/#create_swarm",
            "text": "https://nathanleclaire.com/blog/2015/06/02/docker-machine-0.3.0-sneak-preview-transmogrify-existing-servers-to-be-docker-ready-and-much-much-more/  docker-machine create \\\n    -d generic \\\n    --swarm \\\n    --swarm-master \\\n    --swarm-discovery token://181a89a5589fbc7f3be78e09b585d21a \\\n    --generic-ip-address 107.170.195.209 \\\n    gendo\n\ndocker-machine create -d generic  --swarm --swarm-master \\\n    --swarm-discovery token://b8db8e2b18886a43e77b66c8054a6b31 \\\n    --generic-ip-address 192.168.1.19  --generic-ssh-user  docker  ferma1\n\n\neval $(docker-machine env ferma1)\neval $(docker-machine env --swarm ferma1)",
            "title": "create Swarm"
        },
        {
            "location": "/docker/mkdocs/",
            "text": "Docker\n\n\ndocker run -d -p 0.0.0.0:8002:8000 -v c:\\Work_Exe\\docs:/docs  --name md8002 akrisiun/mkdocs\ndocker logs md8002\n# Success!!!!\n\n@powershell\nps\n\nnetstat -atn -p TCP | findstr \nESTA\n\n\ndocker run -p 8002:8000 -v c:\\Work_Exe\\docs2:/docs        --name md8002 akrisiun/mkdocs\ndocker run -p 8002:8000 -v d:\\Sanitex\\Exchange\\Docs:/docs --name md8002 akrisiun/mkdocs\n\ndocker run -it -p 8002:8000 -v d:\\Sanitex\\Exchange\\Docs:/docs --name md8002 akrisiun/mkdocs\n\n\ndocker run -it -p 8001:8000 -v c:\\Work_Exe\\docs:/docs --name md3 akrisiun/mkdocs1\ndocker exec -it md3 /bin/sh\ndocker exec md3 mkdocs serve --dev-addr=0.0.0.0:8000\n\n\n\nenv\nexport http_proxy=http://???:3128\n\nsudo nano /etc/apt/apt.conf\nAcquire::http::Proxy \nhttp://???:3128\n;\n\n\n\n\nSVG Code\n\n\n\n\n\nResult\n\n\nPROXY SNTX\n\n\nENV http_proxy ${http_proxy}\nset http_proxy=http://???:3128/\n\ndocker build --build-arg http_proxy=http://???:3128/ .\ndocker tag 69c60d49cf53 mkdocs1 \n\ndocker run -it -p 8001:8000 -v d:\\VM\\docker\\mkdocs\\docs:/docs --name  md2 mkdocs1\ndocker run -it -p 8001:8000 -v c:\\Work_Exe\\docs:/docs --name  md3 mkdocs1\n\ndocker run -v d:/data:/data alpine ls /data\n\n#pip / docs \n\npip install -e .[tests,docs]",
            "title": "mkdocs"
        },
        {
            "location": "/docker/mkdocs/#docker",
            "text": "docker run -d -p 0.0.0.0:8002:8000 -v c:\\Work_Exe\\docs:/docs  --name md8002 akrisiun/mkdocs\ndocker logs md8002\n# Success!!!!\n\n@powershell\nps \nnetstat -atn -p TCP | findstr  ESTA \n\ndocker run -p 8002:8000 -v c:\\Work_Exe\\docs2:/docs        --name md8002 akrisiun/mkdocs\ndocker run -p 8002:8000 -v d:\\Sanitex\\Exchange\\Docs:/docs --name md8002 akrisiun/mkdocs\n\ndocker run -it -p 8002:8000 -v d:\\Sanitex\\Exchange\\Docs:/docs --name md8002 akrisiun/mkdocs\n\n\ndocker run -it -p 8001:8000 -v c:\\Work_Exe\\docs:/docs --name md3 akrisiun/mkdocs1\ndocker exec -it md3 /bin/sh\ndocker exec md3 mkdocs serve --dev-addr=0.0.0.0:8000\n\n\n\nenv\nexport http_proxy=http://???:3128\n\nsudo nano /etc/apt/apt.conf\nAcquire::http::Proxy  http://???:3128 ;",
            "title": "Docker"
        },
        {
            "location": "/docker/mkdocs/#svg_code",
            "text": "Result",
            "title": "SVG Code"
        },
        {
            "location": "/docker/mkdocs/#proxy_sntx",
            "text": "ENV http_proxy ${http_proxy}\nset http_proxy=http://???:3128/\n\ndocker build --build-arg http_proxy=http://???:3128/ .\ndocker tag 69c60d49cf53 mkdocs1 \n\ndocker run -it -p 8001:8000 -v d:\\VM\\docker\\mkdocs\\docs:/docs --name  md2 mkdocs1\ndocker run -it -p 8001:8000 -v c:\\Work_Exe\\docs:/docs --name  md3 mkdocs1\n\ndocker run -v d:/data:/data alpine ls /data\n\n#pip / docs \n\npip install -e .[tests,docs]",
            "title": "PROXY SNTX"
        },
        {
            "location": "/docker/dotnetsrc/",
            "text": "Dotnet netcoreapp.1.2 web\n\n\nURLs for production\n\n\n            string[] urls = new[] { \nhttp://0.0.0.0:5000\n }; // default\n\n            if (args != null \n args.Length \n 0)\n            {\n                // --urls \nhttp://*:58088\n\n                var list = args.GetEnumerator();\n                while (list.MoveNext())\n                {\n                    var item = list.Current as string ?? \n;\n                    if (item.Equals(\n--urls\n) \n list.MoveNext())\n                    {\n                        item = list.Current  as string;\n                        urls[0] = item ?? urls[0];\n\n                        Console.WriteLine($\n--urls {item}\n);\n                        break;\n                     }\n                }\n\n            }\n\n            var host = new WebHostBuilder()\n                // .UseConfiguration(config)\n                .UseUrls(urls)\n                .UseSetting(\ndetailedErrors\n, \ntrue\n)\n                .UseKestrel()\n                .UseContentRoot(Directory.GetCurrentDirectory())\n                .UseIISIntegration()\n                .UseStartup\nStartup\n()\n                // .UseApplicationInsights()\n                .Build();\n\n            host.Run();\n\n\n\n\nDockerfile\n\n\nFROM microsoft/dotnet:1.1-runtime-deps\n\nRUN apt-get update \\\n    \n apt-get install -y --no-install-recommends \\\n    \n apt-get install -y curl mc nano\n\n# Install .NET Core\nENV DOTNET_VERSION 1.1.2\n# https://dotnetcli.blob.core.windows.net/dotnet/release/1.1.0/Binaries/1.1.2/dotnet-debian-x64.1.1.2.tar.gz\nENV DOTNET_DOWNLOAD_URL https://dotnetcli.blob.core.windows.net/dotnet/release/1.1.0/Binaries/$DOTNET_VERSION/dotnet-debian-x64.$DOTNET_VERSION.tar.gz\n\nRUN curl -SL $DOTNET_DOWNLOAD_URL --output dotnet.tar.gz \\\n    \n mkdir -p /usr/share/dotnet \\\n    \n tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\n    \n rm dotnet.tar.gz \\\n    \n ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n\nADD web /web/\nWORKDIR /web\nEXPOSE 5000\n\n# RUN dotnet restore\nENV ASPNETCORE_ENVIRONMENT=Development\nENV FOLDER=/web/index\nCMD dotnet Microsoft.SourceBrowser.SourceIndexServer.dll",
            "title": "aspnetcore"
        },
        {
            "location": "/docker/dotnetsrc/#dotnet_netcoreapp12_web",
            "text": "",
            "title": "Dotnet netcoreapp.1.2 web"
        },
        {
            "location": "/docker/dotnetsrc/#urls_for_production",
            "text": "string[] urls = new[] {  http://0.0.0.0:5000  }; // default\n\n            if (args != null   args.Length   0)\n            {\n                // --urls  http://*:58088 \n                var list = args.GetEnumerator();\n                while (list.MoveNext())\n                {\n                    var item = list.Current as string ??  ;\n                    if (item.Equals( --urls )   list.MoveNext())\n                    {\n                        item = list.Current  as string;\n                        urls[0] = item ?? urls[0];\n\n                        Console.WriteLine($ --urls {item} );\n                        break;\n                     }\n                }\n\n            }\n\n            var host = new WebHostBuilder()\n                // .UseConfiguration(config)\n                .UseUrls(urls)\n                .UseSetting( detailedErrors ,  true )\n                .UseKestrel()\n                .UseContentRoot(Directory.GetCurrentDirectory())\n                .UseIISIntegration()\n                .UseStartup Startup ()\n                // .UseApplicationInsights()\n                .Build();\n\n            host.Run();",
            "title": "URLs for production"
        },
        {
            "location": "/docker/dotnetsrc/#dockerfile",
            "text": "FROM microsoft/dotnet:1.1-runtime-deps\n\nRUN apt-get update \\\n      apt-get install -y --no-install-recommends \\\n      apt-get install -y curl mc nano\n\n# Install .NET Core\nENV DOTNET_VERSION 1.1.2\n# https://dotnetcli.blob.core.windows.net/dotnet/release/1.1.0/Binaries/1.1.2/dotnet-debian-x64.1.1.2.tar.gz\nENV DOTNET_DOWNLOAD_URL https://dotnetcli.blob.core.windows.net/dotnet/release/1.1.0/Binaries/$DOTNET_VERSION/dotnet-debian-x64.$DOTNET_VERSION.tar.gz\n\nRUN curl -SL $DOTNET_DOWNLOAD_URL --output dotnet.tar.gz \\\n      mkdir -p /usr/share/dotnet \\\n      tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\n      rm dotnet.tar.gz \\\n      ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n\nADD web /web/\nWORKDIR /web\nEXPOSE 5000\n\n# RUN dotnet restore\nENV ASPNETCORE_ENVIRONMENT=Development\nENV FOLDER=/web/index\nCMD dotnet Microsoft.SourceBrowser.SourceIndexServer.dll",
            "title": "Dockerfile"
        },
        {
            "location": "/osx/brew/",
            "text": "homebrew\n\n\nbrew services list\n\nmysql          started $USER /Users/$USER/Library/LaunchAgents/homebrew.mxcl.mysql.plist\nnginx          started root  /Library/LaunchDaemons/homebrew.mxcl.nginx.plist\nopenvpn        stopped\nphp56          started $USER /Users/$USER/Library/LaunchAgents/homebrew.mxcl.php56.plist\nredis          started $USER /Users/$USER/Library/LaunchAgents/homebrew.mxcl.redis.plist",
            "title": "brew"
        },
        {
            "location": "/osx/brew/#homebrew",
            "text": "brew services list\n\nmysql          started $USER /Users/$USER/Library/LaunchAgents/homebrew.mxcl.mysql.plist\nnginx          started root  /Library/LaunchDaemons/homebrew.mxcl.nginx.plist\nopenvpn        stopped\nphp56          started $USER /Users/$USER/Library/LaunchAgents/homebrew.mxcl.php56.plist\nredis          started $USER /Users/$USER/Library/LaunchAgents/homebrew.mxcl.redis.plist",
            "title": "homebrew"
        },
        {
            "location": "/windows/README/",
            "text": "Other links:\n\n\npowershell\n\nnetstat -atn -p TCP | findstr \nESTA\n\n\nprofile.win10\n\n\nSetup tasks for empty Windows 10\n\n\n\n\ninstall/reset windows  \n\n\ndownload chrome  \n\n\n\n\n3. install choco from https://chocolatey.org/install\n\n\nrun cmd as admin  \n\n\nPowerShell.exe -ExecutionPolicy Unrestricted\n@powershell \niex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\n\n\n\n\n4. choco install tasks\n\n\nchoco install -y conemu\n\nfinally open real console conemu \n\n\nchoco feature list\nchoco feature enable -n=allowGlobalConfirmation\n\nchoco install git kdiff3\nchoco install git-credential-manager-for-windows\n\n\n\n\ngitextensions install manually, no visual studio plugins please\n\n\n5. setup PATH, TEMP\n\n\nPATH=c:\\bin;c:\\System;c:\\Program Files\\Git\\bin\\;d:\\tools;%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\kdiff3\nTEMP=c:\\Temp\n\n\n\n\nGIT:\n\n\ngit config core.whitespace nowarn\ngit config core.filemode false\n\n\n\n\n6. Visual Studio\n\n\nchoco install notepadplusplus.install visualstudiocode\nchoco install netfx-4.5.1-devpack netfx-4.5.2-devpack\n\n# choco install -f -y netfx-4.5.1-devpack netfx-4.5.2-devpack dotnet4.6-targetpack microsoft-build-tools dotnet4.6.1-devpack\n\nchoco install visualstudiocommunity2013\nchoco install vs2013.5\nchoco install visualstudio2013-sdk\nchoco install vsredist2013 windows-sdk-8.1 \n\nchoco install windows-sdk-10.0\nchoco install dotnet4.6-targetpack microsoft-build-tools \nchoco install dotnet4.6.1-devpack\n\nchoco install dotnetcore-sdk -y\n\n\n\n\n7. SQL Server\n\n\nSqlserver 1.04 GB, SSME 2012 825MB :( \n\n\nchoco install mssqlserver2012express sql-server-management-studio\n// only ssme ??? \nchoco install sql-server-management-studio\n\n\n\n\n8. IIS\n\n\nMVC5 fix:\n\nC:\\Program Files (x86)\\Microsoft ASP.NET\\ASP.NET MVC 4\\Assemblies\\\nC:\\Program Files (x86)\\Microsoft ASP.NET\\ASP.NET Web Pages\\v2.0\\Assemblies\\\n\n\nMSBUILD 14.0\\\n\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\\nCommon7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\\n\n\nVirtual machines\n\n\nDocker: \nhttps://github.com/phusion/baseimage-docker#running_startup_scripts\n\n\nhttps://github.com/tmatilai/vagrant-proxyconf\n\n\nVagrant proxy\nvagrant plugin install ./vagrant-proxyconf*.gem \nverbose\n\n\nvagrant plugin install vagrant-proxyconf\nvagrant plugin install vagrant-omnibus",
            "title": "Setup Windows10"
        },
        {
            "location": "/windows/README/#other_links",
            "text": "powershell \nnetstat -atn -p TCP | findstr  ESTA",
            "title": "Other links:"
        },
        {
            "location": "/windows/README/#profilewin10",
            "text": "Setup tasks for empty Windows 10   install/reset windows    download chrome",
            "title": "profile.win10"
        },
        {
            "location": "/windows/README/#3_install_choco_from_httpschocolateyorginstall",
            "text": "run cmd as admin    PowerShell.exe -ExecutionPolicy Unrestricted\n@powershell \niex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))",
            "title": "3. install choco from https://chocolatey.org/install"
        },
        {
            "location": "/windows/README/#4_choco_install_tasks",
            "text": "choco install -y conemu \nfinally open real console conemu   choco feature list\nchoco feature enable -n=allowGlobalConfirmation\n\nchoco install git kdiff3\nchoco install git-credential-manager-for-windows  gitextensions install manually, no visual studio plugins please",
            "title": "4. choco install tasks"
        },
        {
            "location": "/windows/README/#5_setup_path_temp",
            "text": "PATH=c:\\bin;c:\\System;c:\\Program Files\\Git\\bin\\;d:\\tools;%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\kdiff3\nTEMP=c:\\Temp  GIT:  git config core.whitespace nowarn\ngit config core.filemode false",
            "title": "5. setup PATH, TEMP"
        },
        {
            "location": "/windows/README/#6_visual_studio",
            "text": "choco install notepadplusplus.install visualstudiocode\nchoco install netfx-4.5.1-devpack netfx-4.5.2-devpack\n\n# choco install -f -y netfx-4.5.1-devpack netfx-4.5.2-devpack dotnet4.6-targetpack microsoft-build-tools dotnet4.6.1-devpack\n\nchoco install visualstudiocommunity2013\nchoco install vs2013.5\nchoco install visualstudio2013-sdk\nchoco install vsredist2013 windows-sdk-8.1 \n\nchoco install windows-sdk-10.0\nchoco install dotnet4.6-targetpack microsoft-build-tools \nchoco install dotnet4.6.1-devpack\n\nchoco install dotnetcore-sdk -y",
            "title": "6. Visual Studio"
        },
        {
            "location": "/windows/README/#7_sql_server",
            "text": "Sqlserver 1.04 GB, SSME 2012 825MB :(   choco install mssqlserver2012express sql-server-management-studio\n// only ssme ??? \nchoco install sql-server-management-studio",
            "title": "7. SQL Server"
        },
        {
            "location": "/windows/README/#8_iis",
            "text": "MVC5 fix: \nC:\\Program Files (x86)\\Microsoft ASP.NET\\ASP.NET MVC 4\\Assemblies\\\nC:\\Program Files (x86)\\Microsoft ASP.NET\\ASP.NET Web Pages\\v2.0\\Assemblies\\  MSBUILD 14.0\\ \nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\\nCommon7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\",
            "title": "8. IIS"
        },
        {
            "location": "/windows/README/#virtual_machines",
            "text": "Docker:  https://github.com/phusion/baseimage-docker#running_startup_scripts  https://github.com/tmatilai/vagrant-proxyconf  Vagrant proxy\nvagrant plugin install ./vagrant-proxyconf*.gem  verbose  vagrant plugin install vagrant-proxyconf\nvagrant plugin install vagrant-omnibus",
            "title": "Virtual machines"
        },
        {
            "location": "/windows/powershell/",
            "text": "Download nuget\n\n\n@powershell\n\nnetstat -atn -p TCP | findstr \nESTA\n\n\n@powershell\n\nInvoke-WebRequest %NURL% -OutFile %NUGET%\n\n\nif not exist .nuget mkdir .nuget\n\nset NURL=https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\nset NUGET=.nuget\\nuget.exe\nif not exist %~dp0%NUGET% @powershell Invoke-WebRequest %NURL% -OutFile %NUGET%\n\n%NUGET% install -outputDirectory packages Newtonsoft.Json -version 9.0.1\n\n\n\n\nNetwork\n\n\n [System.Net.Dns]::GetHostbyAddress(\n192.168.2.106\n) | Select HostName",
            "title": "powershell"
        },
        {
            "location": "/windows/powershell/#download_nuget",
            "text": "@powershell \nnetstat -atn -p TCP | findstr  ESTA  @powershell \nInvoke-WebRequest %NURL% -OutFile %NUGET%  if not exist .nuget mkdir .nuget\n\nset NURL=https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\nset NUGET=.nuget\\nuget.exe\nif not exist %~dp0%NUGET% @powershell Invoke-WebRequest %NURL% -OutFile %NUGET%\n\n%NUGET% install -outputDirectory packages Newtonsoft.Json -version 9.0.1",
            "title": "Download nuget"
        },
        {
            "location": "/windows/powershell/#network",
            "text": "[System.Net.Dns]::GetHostbyAddress( 192.168.2.106 ) | Select HostName",
            "title": "Network"
        },
        {
            "location": "/dotnet/dotnet/",
            "text": "dotnet-wiki \nhttps://github.com/akrisiun/dotnet-wiki\n\nPersonal .NET clr, asp.net core web notes\n\n\nSources-MvcCore.md\n\n\ncsproj for .NET core (sdk libraries)\n\n\nhttps://docs.microsoft.com/en-us/dotnet/core/tools/project-json-to-csproj\n\n\nproject.json (obsolete)\n\n\nhttps://docs.microsoft.com/en-us/dotnet/articles/core/tools/project-json\n\n\npractical problems\n\n\n{\n    \nbuildOptions\n: {\n\n       \ncompile\n: [\n**/*.cs\n, \n../sources/*.cs\n]\n\n\n       ,  \ndefine\n: [\nTEST\n]\n       ,  \nnowarn\n: [\nCS0168\n, \nCS0219\n]\n       , \nplatform\n: \nx86\n\n       , \ndebugType\n: \nfull\n\n       , \nxmlDoc\n: false\n       , \nexclude\n: [\nbin/**\n, \nobj/**\n]\n    }\n    , \npackOptions\n: {\n        \nrepository\n: {\n            \nurl\n: \nhttp://github.com/dotnet/corefx\n\n        }\n    }\n\n\nlibraries\n: {\n    \nMicrosoft.AspNetCore.Mvc.Core/1.1.0-beta5\n: {\n      \ntype\n: \nproject\n,\n      \npath\n: \n../Microsoft.AspNetCore.Mvc.Core/project.json\n\n    },\n    \nNewtonsoft.Json/9.2.0-beta1\n: {\n      \ntype\n: \nproject\n,\n      \npath\n: \n../../vendor/Newtonsoft.Json/src/Newtonsoft.Json/project.json\n\n    },\n},\n\n\nframeworks\n: {\n    \nnetcoreapp1.0\n: {\n        \nbuildOptions\n: {\n            \ndefine\n: [\nFOO\n, \nBIZ\n]\n        }\n    }\n}\n\n\nframeworks\n: {\n    \nnet451\n: {\n        \nframeworkAssemblies\n: {\n            \nSystem.Runtime\n: {\n                \ntype\n: \nbuild\n,\n                \nversion\n: \n4.0.0\n\n            }\n        }\n    }\n\n\nframeworks\n: {\n  \nnetcoreapp1.0\n: {\n     \nimports\n: \nportable-net45+win8\n\n  }\n}     \n\n\nbuildOptions\n: {\n  \nallowUnsafe\n: true,\n  \nemitEntryPoint\n: true\n}\n\n\ndependencies\n: {\n     \nSystem.Reflection.Metadata\n: \n1.3.0\n\n    , \nMicrosoft.Extensions.JsonParser.Sources\n: {\n      \ntype\n: \nbuild\n,  \nversion\n: \n1.0.0-rc2-20221\n\n    }\n    , \nMicrosoft.Extensions.HashCodeCombiner.Sources\n: {\n           \ntype\n: \nbuild\n,      \nversion\n: \n1.1.0-alpha1-21456\n\n    }\n    , \nMicrosoft.Extensions.DependencyModel\n: \n1.0.0-*\n\n}",
            "title": "wiki"
        },
        {
            "location": "/dotnet/dotnet/#csproj_for_net_core_sdk_libraries",
            "text": "https://docs.microsoft.com/en-us/dotnet/core/tools/project-json-to-csproj",
            "title": "csproj for .NET core (sdk libraries)"
        },
        {
            "location": "/dotnet/dotnet/#projectjson_obsolete",
            "text": "https://docs.microsoft.com/en-us/dotnet/articles/core/tools/project-json  practical problems  {\n     buildOptions : {\n\n        compile : [ **/*.cs ,  ../sources/*.cs ]\n\n\n       ,   define : [ TEST ]\n       ,   nowarn : [ CS0168 ,  CS0219 ]\n       ,  platform :  x86 \n       ,  debugType :  full \n       ,  xmlDoc : false\n       ,  exclude : [ bin/** ,  obj/** ]\n    }\n    ,  packOptions : {\n         repository : {\n             url :  http://github.com/dotnet/corefx \n        }\n    } libraries : {\n     Microsoft.AspNetCore.Mvc.Core/1.1.0-beta5 : {\n       type :  project ,\n       path :  ../Microsoft.AspNetCore.Mvc.Core/project.json \n    },\n     Newtonsoft.Json/9.2.0-beta1 : {\n       type :  project ,\n       path :  ../../vendor/Newtonsoft.Json/src/Newtonsoft.Json/project.json \n    },\n}, frameworks : {\n     netcoreapp1.0 : {\n         buildOptions : {\n             define : [ FOO ,  BIZ ]\n        }\n    }\n} frameworks : {\n     net451 : {\n         frameworkAssemblies : {\n             System.Runtime : {\n                 type :  build ,\n                 version :  4.0.0 \n            }\n        }\n    } frameworks : {\n   netcoreapp1.0 : {\n      imports :  portable-net45+win8 \n  }\n}      buildOptions : {\n   allowUnsafe : true,\n   emitEntryPoint : true\n} dependencies : {\n      System.Reflection.Metadata :  1.3.0 \n    ,  Microsoft.Extensions.JsonParser.Sources : {\n       type :  build ,   version :  1.0.0-rc2-20221 \n    }\n    ,  Microsoft.Extensions.HashCodeCombiner.Sources : {\n            type :  build ,       version :  1.1.0-alpha1-21456 \n    }\n    ,  Microsoft.Extensions.DependencyModel :  1.0.0-* \n}",
            "title": "project.json (obsolete)"
        },
        {
            "location": "/dotnet/csprojsdk/",
            "text": "csproj for .NET core (sdk libraries)\n\n\nhttps://docs.microsoft.com/en-us/dotnet/core/tools/project-json-to-csproj\n.csproj NET.SDK syntax sample : https://gist.github.com/akrisiun/4225c424d10f900b263bc293ee443c01\n\n\nSome tags: win7-x64;osx.10-11-x64;ubuntu.16.04-x64\n\nnet46;\n\nNetStandardImplicitPackageVersion Condition=\n '$(TargetFramework)' == 'netstandard1.3' \n\n$(NetStandardPackageVersion) \n\n\nFileUpgradeFlags /\n\n\nOldToolsVersion\n2.0\n/OldToolsVersion\n\n\nAutoGenerateBindingRedirects\ntrue\n/AutoGenerateBindingRedirects\n\n\nGenerateSerializationAssemblies\nOff\n/GenerateSerializationAssemblies\n\n\n\nRuntimeIdentifiers\nwin7-x64;osx.10-11-x64;ubuntu.16.04-x64\n/RuntimeIdentifiers\n\n \nSchemaVersion\n2.0\n/SchemaVersion\n\n    \nOutputPath\n..\\..\\lib\\\n/OutputPath\n\n    \nFileUpgradeFlags /\n\n    \nOldToolsVersion\n2.0\n/OldToolsVersion\n\n    \nVersion\n1.6.0\n/Version\n\n  \n/PropertyGroup\n\n  \nPropertyGroup Condition=\n'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net452|AnyCPU'\n\n    \nDefineConstants\nTRACE;DEBUG;NET452;NETCORE\n/DefineConstants\n\n  \n/PropertyGroup\n\n\n\n\n\n.Sdk library:\n\n\nProject Sdk=\nMicrosoft.NET.Sdk\n\n\n  \nPropertyGroup\n\n    \n!--\nTargetFrameworks\nnetcoreapp1.1;net452;\n/TargetFrameworks\n--\n\n    \nTargetFrameworks\nnet46;\n/TargetFrameworks\n\n    \nTargetFrameworkVersion\nv4.6\n/TargetFrameworkVersion\n\n    \n!--\nTargetFrameworkVersion\nv4.5.2\n/TargetFrameworkVersion\n--\n\n    \nOutputPath\n..\\..\\lib\\\n/OutputPath\n\n  \n/PropertyGroup\n\n  \nItemGroup\n\n    \nContent Include=\ndefault.cshtml\n /\n\n  \n/ItemGroup\n\n\n  \nItemGroup\n\n    \nPackageReference Include=\nMicrosoft.AspNetCore.Diagnostics\n Version=\n1.1.1\n /\n\n    \nPackageReference Include=\nMicrosoft.AspNetCore.Http.Abstractions\n Version=\n1.1.1\n /\n\n    \nPackageReference Include=\nMicrosoft.AspNetCore.Routing\n Version=\n1.1.1\n /\n\n    \nPackageReference Include=\nMicrosoft.AspNetCore.Server.Kestrel\n Version=\n1.1.1\n /\n\n    \nPackageReference Include=\nMicrosoft.AspNetCore.StaticFiles\n Version=\n1.1.1\n /\n\n    \nPackageReference Include=\nMicrosoft.Extensions.Logging.Console\n Version=\n1.1.1\n /\n\n    \nPackageReference Include=\nNewtonsoft.Json\n Version=\n10.0.2\n /\n\n  \n/ItemGroup\n\n  \nItemGroup\n\n    \nReference Include=\nSystem.Net.Http.WebRequest\n /\n\n    \nReference Include=\nSystem.Web\n /\n\n    \nReference Include=\nSystem.Web.Routing\n /\n\n  \n/ItemGroup\n\n\n/Project",
            "title": ".csproj sdk"
        },
        {
            "location": "/dotnet/csprojsdk/#csproj_for_net_core_sdk_libraries",
            "text": "https://docs.microsoft.com/en-us/dotnet/core/tools/project-json-to-csproj\n.csproj NET.SDK syntax sample : https://gist.github.com/akrisiun/4225c424d10f900b263bc293ee443c01  Some tags: win7-x64;osx.10-11-x64;ubuntu.16.04-x64\n\nnet46; NetStandardImplicitPackageVersion Condition=  '$(TargetFramework)' == 'netstandard1.3'  \n$(NetStandardPackageVersion)  FileUpgradeFlags /  OldToolsVersion 2.0 /OldToolsVersion  AutoGenerateBindingRedirects true /AutoGenerateBindingRedirects  GenerateSerializationAssemblies Off /GenerateSerializationAssemblies  RuntimeIdentifiers win7-x64;osx.10-11-x64;ubuntu.16.04-x64 /RuntimeIdentifiers \n  SchemaVersion 2.0 /SchemaVersion \n     OutputPath ..\\..\\lib\\ /OutputPath \n     FileUpgradeFlags / \n     OldToolsVersion 2.0 /OldToolsVersion \n     Version 1.6.0 /Version \n   /PropertyGroup \n   PropertyGroup Condition= '$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net452|AnyCPU' \n     DefineConstants TRACE;DEBUG;NET452;NETCORE /DefineConstants \n   /PropertyGroup",
            "title": "csproj for .NET core (sdk libraries)"
        },
        {
            "location": "/dotnet/csprojsdk/#sdk_library",
            "text": "Project Sdk= Microsoft.NET.Sdk \n\n   PropertyGroup \n     !-- TargetFrameworks netcoreapp1.1;net452; /TargetFrameworks -- \n     TargetFrameworks net46; /TargetFrameworks \n     TargetFrameworkVersion v4.6 /TargetFrameworkVersion \n     !-- TargetFrameworkVersion v4.5.2 /TargetFrameworkVersion -- \n     OutputPath ..\\..\\lib\\ /OutputPath \n   /PropertyGroup \n   ItemGroup \n     Content Include= default.cshtml  / \n   /ItemGroup \n\n   ItemGroup \n     PackageReference Include= Microsoft.AspNetCore.Diagnostics  Version= 1.1.1  / \n     PackageReference Include= Microsoft.AspNetCore.Http.Abstractions  Version= 1.1.1  / \n     PackageReference Include= Microsoft.AspNetCore.Routing  Version= 1.1.1  / \n     PackageReference Include= Microsoft.AspNetCore.Server.Kestrel  Version= 1.1.1  / \n     PackageReference Include= Microsoft.AspNetCore.StaticFiles  Version= 1.1.1  / \n     PackageReference Include= Microsoft.Extensions.Logging.Console  Version= 1.1.1  / \n     PackageReference Include= Newtonsoft.Json  Version= 10.0.2  / \n   /ItemGroup \n   ItemGroup \n     Reference Include= System.Net.Http.WebRequest  / \n     Reference Include= System.Web  / \n     Reference Include= System.Web.Routing  / \n   /ItemGroup  /Project",
            "title": ".Sdk library:"
        }
    ]
}